# Generated by Selenium IDE
import pytest
import time
import json
import chromedriver_autoinstaller
from asyncio import wait_for
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class wait_for_page_load(object):
  def __init__(self, browser):
    self.browser = browser
  def __enter__(self):
    self.old_page = self.browser.find_element_by_tag_name('html')
  def page_has_loaded(self):
    new_page = self.browser.find_element_by_tag_name('html')
    return new_page.id != self.old_page.id
  def __exit__(self, *_):
    wait_for(self.page_has_loaded)

class TestTest1():
  def setup_method(self, method):
    chromedriver_autoinstaller.install()  # Check if the current version of chromedriver exists
                                          # and if it doesn't exist, download it automatically,
                                          # then add chromedriver to path
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()  
  
  @pytest.mark.asyncio
  async def test_test1(self):
    # Test name: test 1
    # Step # | name | target | value
    # 1 | open | /adfs/ls/?wa=wsignin1.0&wtrealm=urn:cas:cas5prod | 
    self.driver.get("https://cufed.carleton.ca/adfs/ls/?wa=wsignin1.0&wtrealm=urn:cas:cas5prod")
    # 2 | setWindowSize | 974x1040 | 
    self.driver.set_window_size(974, 1040)
    # 3 | type | id=userNameInput | CUNET\alecjeffery
    self.driver.find_element(By.ID, "userNameInput").send_keys("CUNET\\alecjeffery")
    # 4 | type | id=passwordInput | VFR44rfv
    self.driver.find_element(By.ID, "passwordInput").send_keys("VFR44rfv")
    # 8 | click | id=submitButton | 

    # with wait_for_page_load(self.driver.browser):
    #   self.driver.find_element(By.ID, "submitButton").click()
    # self.driver.find_element(By.ID, "submitButton").click()
    self.driver.implicitly_wait(10)
    
    # 9 | click | linkText=Student Timetable | 
    studentTimetableLink = await WebDriverWait(self.driver, timeout=10).until(self.driver.find_element(By.LINK_TEXT, "Student Timetable"))
    studentTimetableLink.click()
  
